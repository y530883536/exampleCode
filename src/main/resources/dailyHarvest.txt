注解一般都是使用在具体的实现类(比如@Transaction)，很少使用在接口上(除非一些专门针对接口的注解)，因为注解不会被继承（也就是使用interface-based proxy的时候注解可能不会生效）
注：JDK的代理是interface-based的，cglib的代理是class-based的；
Spring选择代理的原则是：如果bean实现了接口，那么会使用JDK代理；如果没有的实现接口则使用cglib代理；可以在配置文件中强制使用cglib代理
因为上述的原因（Spring选择代理的不确定性），所以注解不适合写在接口上，而是应该写在具体实现类上
日常的开发中经常要在某个Service调用其他Service，@Transactional的作用就体现在这个地方
REQUIRES_NEW：外面的事务挂起，里面起一个新事务，里面的事务发生异常，外面的事务会接收到异常（至于回不回滚就看外面的事务有没有处理了）
事务的传播机制在一个Service调用多个Service时需要慎重考虑的（后面的Service遇到异常回滚了，前面已执行完的Service哪些要跟着一起回滚，哪些不回滚）
C/S的C是指Client（QQ微信之类），B/S的B是指Brower（所有的服务器网站）
@Transactional只捕获RuntimeException(至于为什么，可能要进一步研究一下源码)，rollback = Exception.class
@Transactional有个value的属性，是用来指定事务管理器(DataSourceTransactionManager)的，一个系统里可能有多个事务管理器，因为可能有多个数据源(库)，不同的数据源(库)要使用不同的事务管理器
一个数据源（DataSource）对应一个数据库，它的作用就是隐藏了连接数据库的具体操作
不管写不写@Transactional，事务是肯定有的(InnoDB的特性，单条sql一个事务)，加上@Transactioal则事务的范围扩大(变成多条sql一个事务)
show (full) processlist		mysql查看死锁需要用到的命令

12.11
@RefreshScope使用时必须在springboot的配置文件中暴露refresh这个接口(spring boot actuator相关)，然后当配置文件修改了之后，调用/actuator/refresh就可以刷新配置文件(这个接口会返回配置文件哪些被修改了)
注：Spring2.0和Spring1.0对这个注解的使用方式略微有些不同，上面是针对Spring2.0的情况
@RefreshScope不能修饰final类
@ConfigurationProperties加在类上要和@Component配合使用，一般还会配置prefix
Math.random(）生成一个从0.0到1.0之间的数字，有概率出0.000000001这种前面几十个0的情况
UNIX时间戳的单位是秒！秒！秒！，java要获取这个时间戳用System.currentTimeMillis()/1000
腾讯的STS是Security Token Service(属于CAM的子模块)，COS是Cloud Object Storage(云对象存储)，CAM是Cloud Access Management(访问权限控制)，CVM是Cloud Virtual Machine(云服务器)
IDC是Internet Data Center，一个比较统称的说法
(Math.random()*9+1)*100000		生成6位随机数
SecretId是用来获取SecretKey的，SecretKey是真正用于生成密码的一个类似辅码的工具
String里面只可能出现双数的"\"，不可能出现单数

12.12
像腾讯api接口的host地址这些，可以选择写在配置文件中而不是写在public static final常量中，因为配置文件有接口可以实时读取，常量的话目前只有重启这条路
HashMap内部对key是没有排序的(或者说我完全看不出来)，TreeMap会对key做升序排列，所有有特殊的需求可以用TreeMap(比如腾讯云的很多接口的参数需要按名字升序排序，此时用TreeMap处理就会方便很多)
字典序也就是ASCII码序(小写字母是比大写字母的值要大的)
File file = new File("src/main/resources/address.xml");		//项目里的相对路径，从src文件夹开始

12.13
腾讯云直播的时候，后台需要返回推流URL给主播APP，返回播放URL给观众APP
Long.toHexString(txTime).toUpperCase()			//将一个10进制数字改成16进制，记得要变大写
像腾讯云的接口，鉴权的主要手段就是：时间戳+SecretId+Signature，可以学习这种安全措施
JSONObject就是一个Map
"aaa".getBytes("UTF-8")		//使用getBytes随手跟字符编码，养成好习惯
用java的MD5加密之后出来的byte[]如果直接组成String有很大概率乱码，此时要做一下处理(byteArrayToHexString)

12.14
事务不推荐加在Controller层
Controller一般不会调用多个Service，因为这样做就没有事务控制了；但是在只有查询的情况下，是可以这样做的
Controller一般按业务分，一般可以这样做，基础的表都有一个对应的Controller，然后云直播，音视频这些做单独的Controller(这些没有对应的表但是会调用基础表的Service)；也就是基础+业务的类型

12.15
网关拦截请求的全过程：
检查请求Header里面是否带有"Authorization"
    -->有：检验Authorization是否合法(这一步用JWT处理)
         -->合法：请求继续往下走，并在Request里面存放一个User对象
         -->不合法：抛异常(身份校验失败)，前端自行处理
    -->没有：检查是否是登陆操作(请求是否含有"login"字段)
        -->是：请求继续往下走，进入登陆函数；登陆之后生成一个Authorization的值，以后前端的请求都要带上这个值
        -->不是：抛异常(你没登陆)，前端跳到登陆页面或者其他处理
总结：只有登陆请求网关会放它过去，其他请求都必须经过网关的校验
不同的网关程序是部署在不同的端口上的
开启80(HTTP端口)和443(HTTPS端口)必须经过ICP(Internet Content Provider，网络内容服务商)备案
在正常的使用中，nginx一般会监听80和443两个端口，然后根据实际业务需求，把请求转发到本机上的其他端口或者另外的服务器上的某个端口(也就是请求总是第一时间经过nginx，在不考虑硬件设备的情况下)
调用第三方服务出现异常要打印详细日志，不然出了问题就等着哭吧

12.19
跨域限制访问有两个地方：接口访问和dom的查询
跨域限制访问，是浏览器限制，也就是说用java写一个http请求去调用接口，是不会有什么跨域的问题的(接口的权限校验就是另外一回事了)
解决跨域就上nginx(接下来的事情就交给前端和运维了)
同源策略中的源指协议域名端口三者联合，只要这三个都一样就是同源

跨域未完待续---------------------------------------------------------------------------------华丽的分割线---------------------------------------------------------------------------------------------------------------------------------------------

12.20
ramdom.nextInt(20)			//符合条件的有20个数字，从0到19
vo可以考虑公用，dto和service还是用户层和管理员层分开吧，便于管理

12.26
registerwitheureka: false		不把自己的服务注册上eureka
rollbackFor = Exception.class	//一般在有自定义的异常时会使用这个
require_new使用的情况一般就是在有自定义异常的时候，比如说钥匙审核完成之后要在钥匙表和住户表分别生成记录，此时会判断住户表是不是已经有相同房间号和手机的用户，有的话不需要加(抛异常)，这时钥匙审核表和钥匙表的修改不能回滚


12.28
像过期时间这种东西，一般会跟着一个状态(是否已过期)，在查询的时候直接按这个状态查，不要用>过期时间这种，然后写一个定时器定时更新这个过期状态

12.30
Spring Cloud只是一套规范，Spring Cloud Netflix和Spring Cloud Consul才是具体的规范实现；现在又多了一套Spring Cloud Alibaba
Spring Cloud Alibaba有个非常大的优势，那就是它通过了阿里巴巴双十一的考验，在可靠性这方面应该是无敌一般的存在，而且文档也是中文的
当我们在cmd敲java的时候，系统会在当前目录找有没有java.exe或者java.bat，如果没有的话就去系统变量的PATH里面注册的目录找
JAVA_HOME，很多程序或第三方都会用到它(比如tomcat还有下面提到的javac命令)，它是必配的
JDK5之后不需要配置classpath了
tomcat的classpath是WEB-INF下的lib文件夹和classes文件夹，这是容器内部自己规定好的
IDEA执行java程序时是自己指定classpath的位置和启动参数，它只依赖JAVA_HOME这个系统变量(猜的，但是应该不会错)
Integer的范围是2开头的10位数(二十多亿)，不能接收时间戳的毫秒数(和时间戳有关的还是用BigInteger或者long吧)
Long的范围是9开头的19位数(这个数字我连念都不会念)
BigInteger是在Long类型都不够用的情况下使用的，正常情况下应该是不会用到才对(只能说荷包的技术负责人真的信心炸裂，19位数都觉得不够用)



















































